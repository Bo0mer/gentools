// Code generated by mongen. DO NOT EDIT.
package servicemws

import (
	alias4 "context"
	alias1 "github.com/Bo0mer/gentools/pkg/service"
	alias2 "github.com/go-kit/kit/metrics"
	alias3 "time"
)

type monitoringService struct {
	next        alias1.Service
	totalOps    alias2.Counter
	failedOps   alias2.Counter
	opsDuration alias2.Histogram
}

// NewMonitoringService creates new monitoring middleware.
func NewMonitoringService(next alias1.Service, totalOps alias2.Counter, failedOps alias2.Counter, opsDuration alias2.Histogram) alias1.Service {
	return &monitoringService{next, totalOps, failedOps, opsDuration}
}
func (m *monitoringService) Work(arg1 alias4.Context) error {
	m.totalOps.With("operation", "work").Add(1)
	_start := alias3.Now()
	result1 := m.next.Work(arg1)
	m.opsDuration.With("operation", "work").Observe(alias3.Since(_start).Seconds())
	if result1 != nil {
		m.failedOps.With("operation", "work").Add(1)
	}
	return result1
}