package main

import (
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"io"

	"github.com/Bo0mer/gentools/pkg/astgen"
)

type model struct {
	fileBuilder *astgen.File
	structName  string
	strct       *astgen.Struct

	contextPackageAlias string
}

func newModel(interfacePath, interfaceName, structName, targetPkg string) *model {
	file := astgen.NewFile(targetPkg)
	strct := astgen.NewStruct(structName)
	file.AppendDeclaration(strct)

	m := &model{
		fileBuilder: file,
		structName:  structName,
		strct:       strct,
	}
	sourcePackageAlias := m.AddImport("", interfacePath)
	logPackageAlias := m.AddImport("", "github.com/go-kit/kit/log")
	m.contextPackageAlias = m.AddImport("", "context")

	constructorBuilder := newConstructorBuilder(logPackageAlias, sourcePackageAlias, interfaceName, m.contextPackageAlias)
	file.AppendDeclaration(constructorBuilder)

	strct.AddField("next", sourcePackageAlias, interfaceName)
	strct.AddField("logger", logPackageAlias, "Logger")
	strct.AddFieldWithType("fields", fieldsFuncType(m.contextPackageAlias))

	return m
}

func (m *model) WriteSource(w io.Writer) error {
	fmt.Fprintf(w, "// Code generated by logen. DO NOT EDIT.\n")
	astFile := m.fileBuilder.Build()

	if err := format.Node(w, token.NewFileSet(), astFile); err != nil {
		return err
	}
	return nil
}

func (m *model) AddImport(pkgName, location string) string {
	return m.fileBuilder.AddImport(pkgName, location)
}

func (m *model) AddMethod(method *astgen.MethodConfig) error {
	mmb := NewLoggingMethodBuilder(m.structName, method, m.contextPackageAlias)

	m.fileBuilder.AppendDeclaration(mmb)
	return nil
}

func (m *model) resolveInterfaceType(location, name string) *ast.SelectorExpr {
	alias := m.AddImport("", location)
	return &ast.SelectorExpr{
		X:   ast.NewIdent(alias),
		Sel: ast.NewIdent(name),
	}
}

func fieldsFuncType(contextPackageAlias string) ast.Expr {
	return &ast.FuncType{
		Params: &ast.FieldList{List: []*ast.Field{
			&ast.Field{
				Names: []*ast.Ident{ast.NewIdent("ctx")},
				Type: &ast.SelectorExpr{
					X:   ast.NewIdent(contextPackageAlias),
					Sel: ast.NewIdent("Context"),
				},
			},
			&ast.Field{
				Names: []*ast.Ident{ast.NewIdent("err")},
				Type:  ast.NewIdent("error"),
			},
		}},
		Results: &ast.FieldList{List: []*ast.Field{
			&ast.Field{Type: ast.NewIdent("[]interface{}")},
		}},
	}
}
